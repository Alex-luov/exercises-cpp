---
name: Параметры и аргументы функции
theory: |
  В этом уроке мы рассмотрим понятия параметров и аргументов функции.

  Во многих случаях возникает необходимость передавать информацию в вызываемую функцию, чтобы у нее были данные для работы. Например, если мы хотим создать функцию для сложения двух чисел, нам нужно указать этой функции, какие именно числа следует складывать при вызове. В противном случае функция не будет знать, какие значения использовать. Именно для этой цели используются параметры и аргументы функции.

  *Параметр функции* – это переменная, используемая внутри функции. Параметры функции работают аналогично переменным, определенным внутри функции, но с одним отличием: они всегда инициализируются значениями, предоставленными при вызове функции.

  Параметры функции определяются в объявлении функции путем их указания в скобках после имени функции. При этом несколько параметров разделяются запятыми.

  Взгляните на код:
  
  ```cpp
  #include <iostream>
  #include <string>

  std::string GetFullName(std::string first_name, std::string last_name) {
    return first_name + " " + last_name;
  }

  int main() {
    std::string result { GetFullName("John", "Wik") };
    std::cout << "Full name is: " << result << std::endl;
  }
  ```

  Здесь у нас есть функция GetFullName, которая принимает две строки в качестве параметров. Эти параметры также называются формальными параметрами (или аргументами) функции. Таким образом, наша функция предоставляет интерфейс, ожидая две строки.

  В функции main происходит вызов функции GetFullName с передачей фактических аргументов. Количество и типы передаваемых аргументов должны соответствовать интерфейсу функции, иначе программа не будет скомпилирована.

  Когда функция вызывается, все параметры функции создаются как переменные, а значение каждого из аргументов копируется в соответствующий параметр. Этот процесс называется передачей по значению.

  ## Передача по значению

  Рассмотрим следующий пример:

  ```cpp
  #include <iostream>

  int AddOne(int num) {
    return num + 1;
  }

  int main() {
    int number = 1;
    std::cout << number << std::endl;

    int result = { AddOne(number) };

    std::cout "number = " << number << std::endl;

    std::cout "result = " << result << std::endl;
  }
  ```

  Эта программа создает следующий вывод:

  <pre class='hexlet-basics-output'>
    number = 1
    result = 2
  </pre>

  Обратим внимание на следующее:

   - Мы передаем переменную в вызов функции AddOne. При компиляции программы вместо переменной подставляется ее значение.

   - Значение переменной number не изменяется. Это происходит потому, что параметр передается по значению, и при вызове функции внутри нее создается локальная переменная num, в которую копируется значение переменной number. Таким образом, функция работает с копией данных, а не с их оригиналом.

  В C++ также существует способ передачи параметров по ссылке, о котором мы поговорим в следующих уроках.

  Итак, в этом уроке мы изучили понятия параметров и аргументов функции, а также то, как передавать параметры в функцию по значению. 

instructions: |
  Реализуйте функцию `remainder()`, которая принимает число типа `int` и возвращает остаток от деления на 2. Остаток от деления можно взять с помощью оператора `%`
tips:
  - |
    [Функции С++](https://learn.microsoft.com/ru-ru/cpp/cpp/functions-cpp?view=msvc-170)
