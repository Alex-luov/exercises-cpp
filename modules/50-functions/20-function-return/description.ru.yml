---
name: Возврат значений
theory: |
  Функции, которые мы определяли в предыдущих уроках, заканчивали свою работу тем, что печатали на экран какие-то данные:

  ```cpp
  void Greating() {
    std::cout << "Hello Code Basics!" << std::endl;
  }
 

  int main() {
    Greating();
    return 0;
  }
  ```

  Пользы от таких функций не очень много, так как результатом их работы невозможно воспользоваться внутри программы.

  В этом уроки мы рассмотрим как сделать наши функции полезными.

  ## Возвращаемые значения

  Когда мы пишем пользовательскую функцию, мы можете определить, будет ли ваша функция возвращать значение вызывающей стороне или нет. Чтобы вернуть значение вызывающей стороне, необходимы две вещи.

  Во-первых, наша функция должна указать, значение какого типа будет возвращено. Это делается путем установки типа возвращаемого значения функции, который является типом, определенным перед именем функции.

  Во-вторых, внутри функции, которая будет возвращать значение, мы используем инструкцию `return`, чтобы указать конкретное значение, возвращаемое вызывающей стороне. Конкретное значение, возвращаемое функцией, называется возвращаемым значением. Когда инструкция `return` выполняется, возвращаемое значение копируется из функции обратно в вызывающую функцию. Этот процесс называется возвратом по значению.

  Общий вид функции:

  ```cpp
  <тип возвращаемого значения> имя функции(аргументы) {
    return возвращаемое значение
  }
  ```

  Давайте рассмотрим простую функцию, которая возвращает строку, и пример программы, которая ее вызывает:

  ```cpp
  #include <iostream>
  #include <string>
  // функция фозвращает строку, поэтому тип возвращаемого значения std::string
  std::string GetDomain() {
    return "Hexlet"; 
  }
 
  int main() {
    std::cout << GetDomain() << std::endl;     // печатает Hexlet

    return 0;
  }
  ```

  Выполнение начинается с верхней части `main`. В первой же инструкции происходит вызов функции `GetDomain()`, в результате она возвращает конкретное значение **Hexlet** обратно вызывающей стороне, которое затем выводится в консоль через std::cout.

  Любой код после `return` не выполняется:

  ```cpp
  int sum() {
    retrun 2;
    std::cout << "Я никогда не выполнюсь";
  }
  ```

  Возвращать можно не только конкретное значение. Так как `return` работает с выражениями, то справа от него может появиться почти все что угодно. Здесь нужно руководствоваться принципами читаемости кода:

  ```cpp
  #include <string>

  std::string GetDomain() {
    std::string domain { "Hexlet" };
    return domain; 
  }

  ```

  Здесь мы не возвращаем переменную, возвращается всегда значение, которое находится в этой переменной. Ниже пример с вычислениями:
  

  ```cpp
  int sum() {
    return 5 + 5;
  }
  ```

  ## Отсутствие возвращаемого значения

  Функции не обязаны возвращать значение. Чтобы сообщить компилятору, что функция не возвращает значение, используется тип возвращаемого значения `void`. Давайте посмотрим на функцию `Greating()`:

  ```cpp
  #include <iostream>

  void Greating() {
    std::cout << "Hello, Hexlet" << std::endl;
  }
  ```

  Эта функция имеет тип возвращаемого значения void, что указывает на то, что она не возвращает значение вызывающей стороне.

  ## Возвращаясь к main

  Теперь у вас есть концептуальные инструменты, чтобы понять, как на самом деле работает функция `main`.

  Когда программа выполняется, операционная система вызывает функцию `main`. Инструкции в main выполняются последовательно. 
  
  Наконец, main возвращает целочисленное значение (обычно 0), и ваша программа завершается. Значение, возвращаемое из `main`, называют кодом возврата и по нему судят об спешности выполнения программы.

instructions: |
  Реализуйте функцию `SayHurrayThreeTimes()`, которая возвращает строку "hurray! hurray! hurray!".
tips:
  - |
    [std::string](https://en.cppreference.com/w/cpp/string/basic_string)
  - |
    [Завершение программы С++](https://learn.microsoft.com/ru-ru/cpp/cpp/program-termination?view=msvc-170)
