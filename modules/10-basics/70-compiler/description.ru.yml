---

name: Компиляция и компоновка(линковка)
theory: |
  С++ компилируемый язык, поэтому прежде чем запускать написанную программу, нам надо текстовые файлы с исходным кодом превратить в машинный код который понятен компьютеру.

  В этом уроке мы разберем что же такое компилятор и как происходит процесс компиляции.

  Процесс компиляции можно разбить на две стадии: **компиляция** и **компоновка**.

  ### Компиляция

  Чтобы скомпилировать программу на C++, мы используем специальную программу, которая последовательно просматривает каждый файл исходного кода (.cpp) и выполняет две важные задачи:

  Сначала он проверяет ваш код, чтобы убедиться, что он соответствует правилам языка C++. В противном случае компилятор выдаст вам ошибку (и номер соответствующей строки), чтобы помочь точно определить, что нужно исправить. Процесс компиляции будет прерван, пока ошибка не будет исправлена.

  Во-вторых, он переводит исходный код C++ в файл машинного кода, называемый объектным файлом.
  
  Объектные файлы обычно имеют имена `name.o` или `name.obj`, где name совпадает с именем файла `.cpp`, из которого он был создан.

  Если бы в вашей программе было бы 3 файла .cpp, компилятор сгенерировал бы 3 объектных файла.

  Компиляторы C++ доступны для многих операционных систем, например в стандартной поставки многих дистрибутивов Linux есть компилятор **gcc**, в Windows можно пользоваться IDE Visual Studio - в нее уже встроен компилятор и система сборки.

  ### Компоновка

  После того, как компилятор создал один или несколько объектных файлов, включается другая программа, называемая компоновщиком (линкером). Работа компоновщика состоит из трех частей:

  1. взять все объектные файлы, сгенерированные компилятором, и объединить их в единую исполняемую программу.

  2. помимо возможности связывать объектные файлы, компоновщик (линкер) также может связывать файлы библиотек. Файл библиотеки – это набор предварительно скомпилированного кода, который был «упакован» для повторного использования в других программах.

  3. компоновщик обеспечивает правильное разрешение всех меж файловых зависимостей. Например, если вы определяете что-то в одном файле .cpp, а затем используете это в другом файле .cpp, компоновщик соединит их вместе. Если компоновщик не может связать ссылку с чем-то с ее определением, вы получите ошибку компоновщика, и процесс линковки будет прерван.

  ### Системы сборки

  Когда проект содержит десятки и даже сотни файлов с исходным кодом, процесс его сборки надо автоматизировать и тут на помощь приходят системы сборки, которые автоматически запускают все нужные команды чтобы скомпилировать и скомпоновать все файлы проекта, а на выходе получается один испоняемый файл.

  Одной из таких систем является утилита Make и Makefile. В Makefile описываются все цели и зависимости проекта, уилита Make смотрит в этот файл и запускает компилятор с соответствующими командами.

  Еще одна популярная система сборки проектов - утилита CMake, которая работает поверх Make, но отличается своей кроссплатформенностью и позволяет делать сборки под различные операционные системы.

  Компиляции и сборка программы не менее важный процесс, чем написание самой программы.

instructions: |
  Просто тренировка. Выведите на экран число 9780262531962.

tips:
  - |
    "Если в редакторе есть запись `// BEGIN` и `// END`, то код нужно писать между этими строчками."
  - |
    [Установка gcc в Windows](https://www.digitalocean.com/community/tutorials/c-compiler-windows-gcc)
  - |
    [gcc для Linux](https://gcc.gnu.org/onlinedocs)
